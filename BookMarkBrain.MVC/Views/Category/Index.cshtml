@model IEnumerable<BookMarkBrain.MVC.Models.Category.CategoryViewModel>
@{
    ViewData["Title"] = "Categories";
}

<div class="page-header d-flex justify-content-between align-items-center">
    <div>
        <h1 class="page-title">Categories</h1>
        <p class="page-subtitle">Manage your content categories and organization</p>
    </div>
    <div>
        <a asp-action="Create" class="btn btn-primary d-flex align-items-center">
            <i class="bi bi-plus-circle me-2"></i> Add Category
        </a>
    </div>
</div>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Categories</li>
    </ol>
</nav>

@if (TempData["Notification"] != null)
{
    <div class="alert alert-@(TempData["NotificationType"] ?? "info") alert-dismissible fade show" role="alert">
        @TempData["Notification"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" id="categorySearch" class="form-control" placeholder="Search categories...">
        </div>
    </div>
    <div class="col-md-6 d-flex justify-content-md-end mt-3 mt-md-0">
        <a asp-action="Tree" class="btn btn-outline-primary me-2">
            <i class="bi bi-diagram-3"></i> View Tree
        </a>
        <div class="dropdown">
            <button class="btn btn-tertiary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-funnel"></i> Sort by
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li><a class="dropdown-item sort-option" data-sort="name" href="#">Name</a></li>
                <li><a class="dropdown-item sort-option" data-sort="order" href="#">Display Order</a></li>
                <li><a class="dropdown-item sort-option" data-sort="created" href="#">Created Date</a></li>
            </ul>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <div class="card">
        <div class="card-body">
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="bi bi-folder2-open fs-1"></i>
                </div>
                <h3 class="empty-state-title">No Categories Found</h3>
                <p class="empty-state-description">
                    You haven't created any categories yet. Categories help you organize your bookmarks efficiently.
                </p>
                <a asp-action="Create" class="btn btn-primary">Create Your First Category</a>
            </div>
        </div>
    </div>
}
else
{
    <div class="row category-container">
        @foreach (var category in Model)
        {
            <div class="col-12 col-md-6 col-lg-4 category-item"
                 data-name="@category.Name.ToLower()"
                 data-order="@category.DisplayOrder"
                 data-created="@category.CreatedAt.ToString("yyyyMMddHHmmss")">
                <div class="card mb-4 category-card">
                    <div class="card-header d-flex align-items-center">
                        <span class="category-color me-2" style="background-color: @category.ColorHex;"></span>
                        <h5 class="card-title mb-0">@category.Name</h5>
                        <div class="ms-auto">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-icon" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@category.Id"><i class="bi bi-pencil me-2"></i>Edit</a></li>
                                    <li><a class="dropdown-item" asp-action="Delete" asp-route-id="@category.Id"><i class="bi bi-trash me-2"></i>Delete</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(category.Description))
                        {
                            <p class="mb-3">
                                @(category.Description.Length > 100 ? $"{category.Description.Substring(0, 100)}..." : category.Description)
                            </p>
                        }
                        else
                        {
                            <p class="text-muted mb-3"><em>No description provided</em></p>
                        }

                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <small class="text-muted">Display Order: @category.DisplayOrder</small>
                            @if (category.ParentCategoryId.HasValue)
                            {
                                <span class="badge bg-light text-dark">
                                    <i class="bi bi-diagram-2 me-1"></i>
                                    Has Parent
                                </span>
                            }
                        </div>

                        @if (category.ChildCategoryIds.Any())
                        {
                            <div class="mt-2">
                                <span class="badge bg-light text-primary">
                                    <i class="bi bi-diagram-3 me-1"></i>
                                    @category.ChildCategoryIds.Count Child @(category.ChildCategoryIds.Count == 1 ? "Category" : "Categories")
                                </span>
                            </div>
                        }
                    </div>
                    <div class="card-footer text-muted d-flex justify-content-between align-items-center">
                        <small>Created: @category.CreatedAt.ToString("MMM dd, yyyy")</small>
                        <div>
                            <a asp-action="Edit" asp-route-id="@category.Id" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-pencil"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Category pagination">
            <ul class="pagination">
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                    <a class="page-link" href="#">Next</a>
                </li>
            </ul>
        </nav>
    </div>
}

<!-- Drag and Drop Modal -->
<div class="modal fade" id="reorderModal" tabindex="-1" aria-labelledby="reorderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reorderModalLabel">Reorder Categories</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Drag and drop categories to change their display order.</p>
                <ul class="list-group" id="sortableCategoryList">
                    @foreach (var category in Model.OrderBy(c => c.DisplayOrder))
                    {
                        <li class="list-group-item d-flex align-items-center" data-id="@category.Id" data-order="@category.DisplayOrder">
                            <i class="bi bi-grip-vertical me-3 text-muted"></i>
                            <span class="category-color" style="background-color: @category.ColorHex;"></span>
                            <span class="ms-2">@category.Name</span>
                            <span class="badge bg-light text-dark ms-auto">Order: @category.DisplayOrder</span>
                        </li>
                    }
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveOrderBtn">Save Order</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .category-card {
            transition: all 0.3s ease;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .category-card:hover {
                transform: translateY(-5px);
                box-shadow: var(--card-shadow);
            }

            .category-card .card-body {
                flex: 1 1 auto;
            }

        .category-color {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: inline-block;
        }

        #sortableCategoryList .list-group-item {
            cursor: grab;
        }

            #sortableCategoryList .list-group-item:active {
                cursor: grabbing;
            }

        .category-card .card-header {
            border-left: 5px solid;
            padding-left: 15px;
        }

        
    </style>
}

@section PageScripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Search functionality
            const searchInput = document.getElementById('categorySearch');
            const categoryItems = document.querySelectorAll('.category-item');

            searchInput.addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();

                categoryItems.forEach(item => {
                    const categoryName = item.getAttribute('data-name');
                    if (categoryName.includes(searchValue)) {
                        item.style.display = '';
                    } else {
                        item.style.display = 'none';
                    }
                });
            });

            // Sort functionality
            const sortOptions = document.querySelectorAll('.sort-option');
            const categoryContainer = document.querySelector('.category-container');

            sortOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sortBy = this.getAttribute('data-sort');
                    const categories = Array.from(categoryItems);

                    categories.sort((a, b) => {
                        const aValue = a.getAttribute(`data-${sortBy}`);
                        const bValue = b.getAttribute(`data-${sortBy}`);

                        if (sortBy === 'order') {
                            return parseInt(aValue) - parseInt(bValue);
                        } else if (sortBy === 'created') {
                            return bValue.localeCompare(aValue); // newest first
                        } else {
                            return aValue.localeCompare(bValue); // alphabetic
                        }
                    });

                    categories.forEach(category => {
                        categoryContainer.appendChild(category);
                    });
                });
            });

            // Color the border of category cards
            document.querySelectorAll('.card-header').forEach(header => {
                const colorDot = header.querySelector('.category-color');
                if (colorDot) {
                    const color = colorDot.style.backgroundColor;
                    header.style.borderLeftColor = color;
                }
            });

            // Make category list sortable in modal
            const sortableCategoryList = document.getElementById('sortableCategoryList');
            if (sortableCategoryList) {
                new Sortable(sortableCategoryList, {
                    animation: 150,
                    ghostClass: 'bg-light',
                    handle: '.bi-grip-vertical',
                    onEnd: function(evt) {
                        // Update order numbers in the UI
                        const items = sortableCategoryList.querySelectorAll('.list-group-item');
                        items.forEach((item, index) => {
                            const orderBadge = item.querySelector('.badge');
                            orderBadge.textContent = `Order: ${index + 1}`;
                            item.setAttribute('data-order', index + 1);
                        });
                    }
                });
            }

            // Save new category order
            const saveOrderBtn = document.getElementById('saveOrderBtn');
            if (saveOrderBtn) {
                saveOrderBtn.addEventListener('click', function() {
                    const items = sortableCategoryList.querySelectorAll('.list-group-item');
                    const orderUpdates = {};

                    items.forEach((item, index) => {
                        const categoryId = item.getAttribute('data-id');
                        orderUpdates[categoryId] = index + 1;
                    });

                    // Send to server via AJAX
                    fetch('@Url.Action("UpdateDisplayOrder")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify(orderUpdates)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.reload();
                        } else {
                            alert('Failed to update order. Please try again.');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred. Please try again.');
                    });
                });
            }
        });
    </script>
}