@using BookMarkBrain.MVC.Models.Tweet
@model TweetListViewModel

@{
    ViewData["Title"] = "Tweets";
}

@section PageStyles {
    <style>
        /* Tweet list specific styles */
        .tweet-filters {
            background-color: white;
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--border-color);
            box-shadow: var(--box-shadow);
            padding: 1.25rem;
            margin-bottom: 1.5rem;
        }

        .status-filter-btn {
            border-radius: var(--border-radius-full);
            padding: 0.375rem 1rem;
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

            .status-filter-btn.active {
                background-color: var(--primary-color);
                color: white;
            }

        .tweet-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.25rem;
        }

        .tweet-card {
            display: flex;
            flex-direction: column;
            height: 100%;
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--border-color);
            background-color: white;
            box-shadow: var(--card-shadow);
            transition: all 0.25s ease;
            position: relative;
            overflow: hidden;
        }

            .tweet-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 12px 20px -8px rgba(0, 0, 0, 0.15);
            }

        .tweet-card-header {
            padding: 1rem 1.25rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: rgba(59, 130, 246, 0.03);
        }

        .tweet-card-body {
            flex: 1;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
        }

        .tweet-card-footer {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--border-color);
            background-color: rgba(59, 130, 246, 0.02);
        }

        .tweet-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--tertiary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            color: var(--primary-color);
            font-size: 1rem;
        }

        .tweet-content {
            margin-bottom: 1rem;
            line-height: 1.6;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 5;
            -webkit-box-orient: vertical;
        }

        .tweet-meta {
            display: flex;
            align-items: center;
            color: var(--secondary-color);
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
            flex-wrap: wrap;
            gap: 0.75rem;
        }

            .tweet-meta i {
                margin-right: 0.25rem;
                font-size: 0.875rem;
            }

        .tweet-categories {
            margin-top: auto;
            padding-top: 0.75rem;
        }

        .category-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: var(--border-radius-full);
            background-color: var(--tertiary-color);
            color: var(--secondary-color);
            font-size: 0.75rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            text-decoration: none;
            transition: all 0.2s ease;
        }

            .category-badge i {
                margin-right: 0.25rem;
                font-size: 0.75rem;
            }

            .category-badge:hover {
                background-color: rgba(59, 130, 246, 0.1);
                color: var(--primary-color);
            }

        .seen-badge {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: var(--border-radius);
            font-size: 0.75rem;
            font-weight: 500;
        }

            .seen-badge.seen {
                background-color: rgba(16, 185, 129, 0.1);
                color: var(--success-color);
            }

            .seen-badge.unseen {
                background-color: rgba(239, 68, 68, 0.1);
                color: var(--danger-color);
            }

        .platform-badge {
            position: absolute;
            top: 0.75rem;
            left: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: var(--border-radius);
            font-size: 0.75rem;
            background-color: rgba(99, 102, 241, 0.1);
            color: var(--primary-color);
        }

            .platform-badge.twitter {
                background-color: rgba(29, 161, 242, 0.1);
                color: #1DA1F2;
            }

            .platform-badge.facebook {
                background-color: rgba(66, 103, 178, 0.1);
                color: #4267B2;
            }

            .platform-badge.linkedin {
                background-color: rgba(0, 119, 181, 0.1);
                color: #0077B5;
            }

        .tweet-actions {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .dropdown-menu {
            min-width: 160px;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            border: 1px solid var(--border-color);
            padding: 0.5rem 0;
        }

        .dropdown-item {
            padding: 0.5rem 1rem;
            display: flex;
            align-items: center;
            font-size: 0.875rem;
        }

            .dropdown-item i {
                margin-right: 0.5rem;
                width: 16px;
                text-align: center;
            }

        .search-form {
            position: relative;
        }

            .search-form .search-icon {
                position: absolute;
                left: 1rem;
                top: 50%;
                transform: translateY(-50%);
                color: var(--secondary-color);
                z-index: 2;
            }

            .search-form .search-input {
                padding-left: 2.5rem;
                height: 46px;
                border-radius: var(--border-radius-full);
            }

        .dropdown.filter-dropdown .dropdown-toggle::after {
            margin-left: 0.5rem;
        }

        /* Empty state */
        .tweets-empty-state {
            padding: 3rem 1rem;
            text-align: center;
            background-color: white;
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--border-color);
        }

        .tweets-empty-icon {
            height: 80px;
            width: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: rgba(99, 102, 241, 0.1);
            border-radius: 50%;
            color: var(--primary-color);
            margin: 0 auto 1.5rem;
            font-size: 2rem;
        }

        /* Pagination styling */
        .pagination {
            margin-top: 2rem;
            justify-content: center;
        }

        .page-link {
            padding: 0.5rem 0.75rem;
            color: var(--primary-color);
            border-radius: var(--border-radius);
            margin: 0 0.25rem;
            border: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 36px;
        }

            .page-link:hover {
                background-color: var(--tertiary-color);
                color: var(--primary-hover);
                border-color: var(--border-color);
            }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
        }

        .page-item.disabled .page-link {
            color: var(--secondary-color);
            background-color: var(--tertiary-color);
            border-color: var(--border-color);
        }

        /* Active filters styling */
        .active-filters {
            padding: 0.75rem 0.5rem;
            border-top: 1px solid rgba(59, 130, 246, 0.1);
            margin-top: 1rem;
            padding-top: 1rem;
        }

            .active-filters .badge {
                display: inline-flex;
                align-items: center;
                padding: 0.4rem 0.75rem;
                font-weight: 500;
                background-color: rgba(59, 130, 246, 0.08);
                border: 1px solid rgba(59, 130, 246, 0.1);
                color: var(--dark-color);
            }

                .active-filters .badge a {
                    color: var(--danger-color);
                    transition: all 0.2s ease;
                }

                    .active-filters .badge a:hover {
                        transform: scale(1.15);
                    }

        /* Tweet card hover and transition effects */
        .tweet-card {
            transform-origin: center;
            transform: perspective(1000px) rotateX(0deg);
            transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

            .tweet-card:hover {
                transform: perspective(1000px) rotateX(2deg) translateY(-5px);
                border-color: rgba(59, 130, 246, 0.3);
            }

        /* Enhanced platform badge styling */
        .platform-badge {
            font-weight: 500;
            letter-spacing: 0.02em;
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
        }

            .platform-badge.twitter {
                background-color: rgba(29, 161, 242, 0.12);
                border: 1px solid rgba(29, 161, 242, 0.2);
            }

            .platform-badge.facebook {
                background-color: rgba(66, 103, 178, 0.12);
                border: 1px solid rgba(66, 103, 178, 0.2);
            }

            .platform-badge.linkedin {
                background-color: rgba(0, 119, 181, 0.12);
                border: 1px solid rgba(0, 119, 181, 0.2);
            }

        /* Seen/Unseen badge enhancements */
        .seen-badge {
            font-weight: 500;
            letter-spacing: 0.02em;
            display: inline-flex;
            align-items: center;
            gap: 0.3rem;
        }

            .seen-badge.seen {
                background-color: rgba(16, 185, 129, 0.12);
                border: 1px solid rgba(16, 185, 129, 0.2);
            }

            .seen-badge.unseen {
                background-color: rgba(239, 68, 68, 0.12);
                border: 1px solid rgba(239, 68, 68, 0.2);
            }

        /* Hashtag badge hover effect */
        .hashtag-badge {
            transition: all 0.25s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

            .hashtag-badge:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 6px -1px rgba(59, 130, 246, 0.1), 0 2px 4px -1px rgba(59, 130, 246, 0.06);
            }

        /* Tweet content enhancements */
        .tweet-content {
            font-size: var(--font-size-base);
            line-height: 1.6;
            color: var(--dark-color);
            word-break: break-word;
        }

        /* Tweet avatar color variations based on first letter */
        .tweet-avatar[data-initial="A"], .tweet-avatar[data-initial="E"], .tweet-avatar[data-initial="I"],
        .tweet-avatar[data-initial="O"], .tweet-avatar[data-initial="U"] {
            background-color: rgba(59, 130, 246, 0.1);
            color: var(--primary-color);
        }

        .tweet-avatar[data-initial="B"], .tweet-avatar[data-initial="F"], .tweet-avatar[data-initial="J"],
        .tweet-avatar[data-initial="N"], .tweet-avatar[data-initial="R"] {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
        }

        .tweet-avatar[data-initial="C"], .tweet-avatar[data-initial="G"], .tweet-avatar[data-initial="K"],
        .tweet-avatar[data-initial="P"], .tweet-avatar[data-initial="T"] {
            background-color: rgba(245, 158, 11, 0.1);
            color: var(--warning-color);
        }

        .tweet-avatar[data-initial="D"], .tweet-avatar[data-initial="H"], .tweet-avatar[data-initial="L"],
        .tweet-avatar[data-initial="Q"], .tweet-avatar[data-initial="V"] {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger-color);
        }

        .tweet-avatar[data-initial="M"], .tweet-avatar[data-initial="S"], .tweet-avatar[data-initial="W"],
        .tweet-avatar[data-initial="X"], .tweet-avatar[data-initial="Y"], .tweet-avatar[data-initial="Z"] {
            background-color: rgba(139, 92, 246, 0.1);
            color: #8b5cf6;
        }
    </style>
}


<div class="content-wrapper">
    <!-- Page header -->
    <div class="page-header d-flex justify-content-between align-items-center flex-wrap">
        <div>
            <p class="page-subtitle">Manage your saved tweets and bookmarks</p>
        </div>
        <div class="d-flex gap-2">
            <a href="@Url.Action("Create", "Tweet")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i> Add Tweet
            </a>
            <a href="@Url.Action("ExtractTweet", "Tweet")" class="btn btn-tertiary">
                <i class="fas fa-download me-2"></i> Extract from URL
            </a>
        </div>
    </div>

    <!-- Filters section -->
    <div class="tweet-filters mb-4">
        <form asp-action="Index" method="get" id="searchForm">
            <div class="row g-3">
                <!-- Search box -->
                <div class="col-md-4">
                    <div class="search-form">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="form-control search-input" 
                               name="SearchTerm" 
                               value="@Model.SearchCriteria.SearchTerm" 
                               placeholder="Search tweets...">
                    </div>
                </div>
<!-- Category filter -->
<div class="col-md-3">
    <select class="form-select" name="CategoryId" onchange="document.getElementById('searchForm').submit()">
        <option value="">All Categories</option>
        @foreach (var category in ViewBag.Categories ?? new List<dynamic>())
        {
            <option value="@category.Id" 
                    selected="@(Model.SearchCriteria.CategoryId == category.Id ? "selected" : null)">
                @category.Name
            </option>
        }
    </select>
</div>

<!-- Platform filter -->
<div class="col-md-2">
    <select class="form-select" name="PlatformName" onchange="document.getElementById('searchForm').submit()">
        <option value="">All Platforms</option>
        <option value="Twitter" selected="@(Model.SearchCriteria.PlatformName == "Twitter" ? "selected" : null)">Twitter</option>
        <option value="Facebook" selected="@(Model.SearchCriteria.PlatformName == "Facebook" ? "selected" : null)">Facebook</option>
        <option value="LinkedIn" selected="@(Model.SearchCriteria.PlatformName == "LinkedIn" ? "selected" : null)">LinkedIn</option>
        <option value="Other" selected="@(Model.SearchCriteria.PlatformName == "Other" ? "selected" : null)">Other</option>
    </select>
</div>

                <!-- Status filter -->
                <div class="col-md-3">
                    <div class="btn-group w-100" role="group">
                        <a href="@Url.Action("Index", "Tweet", new { SeenStatus = 0, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName })" 
                           class="btn @(Model.SearchCriteria.SeenStatus == null ? "btn-primary" : "btn-tertiary") status-filter-btn">
                            All
                        </a>
                        <a href="@Url.Action("Index", "Tweet", new { SeenStatus = false, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName })" 
                           class="btn @(Model.SearchCriteria.SeenStatus == false ? "btn-primary" : "btn-tertiary") status-filter-btn">
                            Unseen
                        </a>
                        <a href="@Url.Action("Index", "Tweet", new { SeenStatus = true, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName })" 
                           class="btn @(Model.SearchCriteria.SeenStatus == true ? "btn-primary" : "btn-tertiary") status-filter-btn">
                            Seen
                        </a>
                    </div>
                </div>
            </div>

            <!-- Active filters display and clear -->
            @if (!string.IsNullOrEmpty(Model.SearchCriteria.SearchTerm) || 
                 Model.SearchCriteria.CategoryId.HasValue || 
                 !string.IsNullOrEmpty(Model.SearchCriteria.PlatformName) || 
                 Model.SearchCriteria.SeenStatus.HasValue || 
                 !string.IsNullOrEmpty(Model.SearchCriteria.HashtagName))
            {
                <div class="active-filters mt-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <span class="text-secondary me-2">Active Filters:</span>
                            
                            @if (!string.IsNullOrEmpty(Model.SearchCriteria.SearchTerm))
                            {
                                <span class="badge bg-light text-dark me-2 py-1 px-2">
                                    Search: "@Model.SearchCriteria.SearchTerm"
                                    <a href="@Url.Action("Index", "Tweet", new { SearchTerm = "", CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus })" class="ms-1 text-danger">
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                </span>
                            }
                            
                            @if (Model.SearchCriteria.CategoryId.HasValue)
                            {
                                <span class="badge bg-light text-dark me-2 py-1 px-2">
                                    Category: @(ViewBag.CategoryName ?? "Selected")
                                    <a href="@Url.Action("Index", "Tweet", new { CategoryId = "", SearchTerm = Model.SearchCriteria.SearchTerm, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus })" class="ms-1 text-danger">
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                </span>
                            }
                            
                            @if (!string.IsNullOrEmpty(Model.SearchCriteria.PlatformName))
                            {
                                <span class="badge bg-light text-dark me-2 py-1 px-2">
                                    Platform: @Model.SearchCriteria.PlatformName
                                    <a href="@Url.Action("Index", "Tweet", new { PlatformName = "", SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, SeenStatus = Model.SearchCriteria.SeenStatus })" class="ms-1 text-danger">
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                </span>
                            }
                            
                            @if (Model.SearchCriteria.SeenStatus.HasValue)
                            {
                                <span class="badge bg-light text-dark me-2 py-1 px-2">
                                    Status: @(Model.SearchCriteria.SeenStatus.Value ? "Seen" : "Unseen")
                                    <a href="@Url.Action("Index", "Tweet", new { SeenStatus = "", SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName })" class="ms-1 text-danger">
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                </span>
                            }
                            
                            @if (!string.IsNullOrEmpty(Model.SearchCriteria.HashtagName))
                            {
                                <span class="badge bg-light text-dark me-2 py-1 px-2">
                                    Hashtag: #@Model.SearchCriteria.HashtagName
                                    <a href="@Url.Action("Index", "Tweet", new { HashtagName = "", SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus })" class="ms-1 text-danger">
                                        <i class="fas fa-times-circle"></i>
                                    </a>
                                </span>
                            }
                        </div>
                        
                        <a href="@Url.Action("Index", "Tweet")" class="btn btn-sm btn-outline-secondary">
                            <i class="fas fa-times me-1"></i> Clear All
                        </a>
                    </div>
                </div>
            }
        </form>
    </div>

    <!-- Main content: Tweet grid -->
    @if (Model.Tweets != null && Model.Tweets.Any())
    {
        <div class="tweet-grid">
            @foreach (var tweet in Model.Tweets)
            {
                <div class="tweet-card">
                    <!-- Platform badge -->
                    <div class="platform-badge @tweet.PlatformName?.ToLower()">
                        <i class="fab fa-@(tweet.PlatformName?.ToLower() == "twitter" ? "twitter" : 
                                          tweet.PlatformName?.ToLower() == "facebook" ? "facebook-f" :
                                          tweet.PlatformName?.ToLower() == "linkedin" ? "linkedin-in" : "globe")"></i>
                        @tweet.PlatformName
                    </div>
                    
                    <!-- Seen/Unseen badge -->
                    <div class="seen-badge @(tweet.IsSeen ? "seen" : "unseen")">
                        <i class="fas @(tweet.IsSeen ? "fa-eye" : "fa-eye-slash") me-1"></i>
                        @(tweet.IsSeen ? "Seen" : "Unseen")
                    </div>
                    
                    <!-- Card header -->
                    <div class="tweet-card-header">
                        <div class="d-flex align-items-center">
                            <div class="tweet-avatar me-2">
                                @(string.IsNullOrEmpty(tweet.AuthorUsername) ? "?" : tweet.AuthorUsername.Substring(0, 1).ToUpper())
                            </div>
                            <div>
                                <div class="fw-semibold">@tweet.AuthorUsername</div>
                                <div class="text-secondary small">
                                    @(tweet.TweetDate.HasValue ? tweet.TweetDate.Value.ToString("MMM dd, yyyy") : "Unknown date")
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Card body -->
                    <div class="tweet-card-body">
                        <div class="tweet-content mb-3">
                            @tweet.Content
                        </div>
                        
                        <!-- Tweet metadata -->
                        <div class="tweet-meta">
                            @if (!string.IsNullOrEmpty(tweet.CategoryName))
                            {
                                <span>
                                    <i class="fas fa-folder"></i> @tweet.CategoryName
                                </span>
                            }
                            
                            @if (!string.IsNullOrEmpty(tweet.OriginalUrl))
                            {
                                <a href="@tweet.OriginalUrl" target="_blank" class="text-decoration-none">
                                    <i class="fas fa-external-link-alt"></i> Original
                                </a>
                            }
                        </div>
                        
                        <!-- Hashtags -->
                        @if (tweet.Hashtags != null && tweet.Hashtags.Any())
                        {
                            <div class="tweet-tags">
                                @foreach (var hashtag in tweet.Hashtags)
                                {
                                    <a href="@Url.Action("Index", "Tweet", new { HashtagName = hashtag })" class="hashtag-badge">
                                        #@hashtag
                                    </a>
                                }
                            </div>
                        }
                    </div>
                    
                    <!-- Card footer with actions -->
                    <div class="tweet-card-footer">
                        <div class="tweet-actions">
                            <a href="@Url.Action("Details", "Tweet", new { id = tweet.Id })" class="btn btn-sm btn-tertiary">
                                <i class="fas fa-eye me-1"></i> View
                            </a>
                            
                            <div class="dropdown">
                                <button class="btn btn-sm btn-tertiary dropdown-toggle" type="button" id="dropdownMenu-@tweet.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-h"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenu-@tweet.Id">
                                    <li>
                                        <a class="dropdown-item" href="@Url.Action("Edit", "Tweet", new { id = tweet.Id })">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" href="@Url.Action("ToggleSeen", "Tweet", new { id = tweet.Id })">
                                            <i class="fas @(tweet.IsSeen ? "fa-eye-slash" : "fa-eye")"></i> 
                                            Mark as @(tweet.IsSeen ? "Unseen" : "Seen")
                                        </a>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <a class="dropdown-item text-danger" href="#" 
                                           data-bs-toggle="modal" 
                                           data-bs-target="#deleteTweetModal" 
                                           data-tweet-id="@tweet.Id"
                                           data-tweet-content="@(tweet.Content.Length > 50 ? tweet.Content.Substring(0, 50) + "..." : tweet.Content)">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (Model.Pagination.TotalPages > 1)
        {
            <nav aria-label="Tweet pagination">
                <ul class="pagination">
                    @if (Model.Pagination.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", "Tweet", new { page = 1, pageSize = Model.Pagination.PageSize, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus, HashtagName = Model.SearchCriteria.HashtagName })">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", "Tweet", new { page = Model.Pagination.CurrentPage - 1, pageSize = Model.Pagination.PageSize, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus, HashtagName = Model.SearchCriteria.HashtagName })">
                                <i class="fas fa-angle-left"></i>
                            </a>
                        </li>
                    }
                    
                    @{
                        int startPage = Math.Max(1, Model.Pagination.CurrentPage - 2);
                        int endPage = Math.Min(Model.Pagination.TotalPages, startPage + 4);
                        
                        if (endPage - startPage < 4 && endPage < Model.Pagination.TotalPages)
                        {
                            endPage = Math.Min(Model.Pagination.TotalPages, endPage + (4 - (endPage - startPage)));
                        }
                        
                        if (endPage - startPage < 4 && startPage > 1)
                        {
                            startPage = Math.Max(1, startPage - (4 - (endPage - startPage)));
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", "Tweet", new { page = i, pageSize = Model.Pagination.PageSize, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus, HashtagName = Model.SearchCriteria.HashtagName })">
                                @i
                            </a>
                        </li>
                    }
                    
                    @if (Model.Pagination.CurrentPage < Model.Pagination.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", "Tweet", new { page = Model.Pagination.CurrentPage + 1, pageSize = Model.Pagination.PageSize, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus, HashtagName = Model.SearchCriteria.HashtagName })">
                                <i class="fas fa-angle-right"></i>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", "Tweet", new { page = Model.Pagination.TotalPages, pageSize = Model.Pagination.PageSize, SearchTerm = Model.SearchCriteria.SearchTerm, CategoryId = Model.SearchCriteria.CategoryId, PlatformName = Model.SearchCriteria.PlatformName, SeenStatus = Model.SearchCriteria.SeenStatus, HashtagName = Model.SearchCriteria.HashtagName })">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
    else
    {
        <!-- Empty state -->
        <div class="tweets-empty-state">
            <div class="tweets-empty-icon">
                <i class="fas fa-comment-slash"></i>
            </div>
            <h3>No tweets found</h3>
            <p class="text-secondary mb-4">
                @if (!string.IsNullOrEmpty(Model.SearchCriteria.SearchTerm) || 
                    Model.SearchCriteria.CategoryId.HasValue || 
                    !string.IsNullOrEmpty(Model.SearchCriteria.PlatformName) || 
                    Model.SearchCriteria.SeenStatus.HasValue || 
                    !string.IsNullOrEmpty(Model.SearchCriteria.HashtagName))
                {
                    <span>No tweets match your current filters. Try adjusting your search criteria.</span>
                }
                else
                {
                    <span>You haven't saved any tweets yet. Start by adding your first tweet!</span>
                }
            </p>
            <div class="d-flex gap-3 justify-content-center">
                @if (!string.IsNullOrEmpty(Model.SearchCriteria.SearchTerm) || 
                    Model.SearchCriteria.CategoryId.HasValue || 
                    !string.IsNullOrEmpty(Model.SearchCriteria.PlatformName) || 
                    Model.SearchCriteria.SeenStatus.HasValue || 
                    !string.IsNullOrEmpty(Model.SearchCriteria.HashtagName))
                {
                    <a href="@Url.Action("Index", "Tweet")" class="btn btn-tertiary">
                        <i class="fas fa-times me-2"></i> Clear Filters
                    </a>
                }
                <a href="@Url.Action("Create", "Tweet")" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i> Add Tweet
                </a>
                <a href="@Url.Action("ExtractTweet", "Tweet")" class="btn btn-tertiary">
                    <i class="fas fa-download me-2"></i> Extract from URL
                </a>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteTweetModal" tabindex="-1" aria-labelledby="deleteTweetModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTweetModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this tweet?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    This action cannot be undone.
                </div>
                <p class="tweet-preview fw-light fst-italic"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-tertiary" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">
                    <i class="fas fa-trash-alt me-1"></i> Delete
                </a>
            </div>
        </div>
    </div>
</div>

@section PageScripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Delete tweet modal functionality
            var deleteTweetModal = document.getElementById('deleteTweetModal');
            if (deleteTweetModal) {
                deleteTweetModal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget;
                    var tweetId = button.getAttribute('data-tweet-id');
                    var tweetContent = button.getAttribute('data-tweet-content');
                    
                    var deleteLink = document.getElementById('confirmDeleteBtn');
                    deleteLink.href = '@Url.Action("Delete", "Tweet")/' + tweetId;
                    
                    var previewElement = deleteTweetModal.querySelector('.tweet-preview');
                    if (previewElement && tweetContent) {
                        previewElement.textContent = '"' + tweetContent + '"';
                    }
                });
            }
            
            // Set focus on search input if it contains a value
            var searchInput = document.querySelector('.search-input');
            if (searchInput && searchInput.value) {
                searchInput.focus();
                // Place cursor at the end
                var val = searchInput.value;
                searchInput.value = '';
                searchInput.value = val;
            }
        });
    </script>
}

@section AddToHead {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
}